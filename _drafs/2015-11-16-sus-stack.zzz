---
title: distributed systems with libmill and nanomsg
layout: post
---

In this post I'm going to give an introduction to using the SÃºstrik stack for developing high performance distributed systems. While both libraries have been out in beta for a couple years, they are becoming stable. libmill recently hit version 1.0, and according to Garrett D'Amore, the top contributer to nanomsg, we may be only a few weeks from a version 1.0 release of nanomsg.

Libmill is a c library for working with coroutines in a style that is simliar to golang, complete with a syntactically similiar version of channels, select statements, and goroutines.

Nanomsg is the reference implementation of the scalability protocols, a composable layer on top of the underlying sockets which makes it simple to develop robust distributed systems.

While you can use them separately, together they show alot of synergy. Libmill operates in the context of a single thread, so you need to avoid blocking. To make this possible, libmill provides nonblocking versions of io functions like reading from a file or sleeping. Nanomsg provides a flag to allow for either blocking or non blocking io calls. Since we don't want to block the thread, we can ask nanomsg for a file descripter which will signal when there is data available. We can combine this with libmill's wait to yield our goroutine until  there is data to be read.

Below is a more conrete example, implementing the subscribe side of the pub-sub pattern. Notice the coroutine keyword, a decorator that libmill uses to indicate a function that will be ran as a coroutine. When we set the topic as "nanomsg", we will receive any message which has a matching prefix, for example "nanomsg :D".


    coroutine void subscribe()
    {
      int subscriber = nn_socket(AF_SP,NN_SUB);
      char *buffer= NULL;
      char *topic= "nanomsg";
      int fd;
      size_t fd_sz = sizeof(fd);

      //subscribe to topic "nanomsg"
      nn_setsockopt(subscriber,NN_SUB,NN_SUB_SUBSCRIBE, topic, strlen(topic));

      nn_connect(  
        nn_setsockopt(subscriber,"tcp://127.0.0.1:1234");

      //get the file descripter which signals when we should read
      nn_getsockopt(subscriber,NN_SOL_SOCKET,NN_RCVFD,&fd,&fd_sz);

      //libmill waits until the socket has data to be read
      fdwait(fd,FDW_IN,-1);
      //using the NN_MSG flag, we let nanomsg allocate the buffer
      size_t nbytes = nn_recv(subscriber,&buffer,NN_MSG,NN_DONTWAIT);

      printf("%s",buffer);
      nn_freemsg(buffer);
    }
